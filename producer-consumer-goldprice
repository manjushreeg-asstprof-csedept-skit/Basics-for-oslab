#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5   // Maximum buffer size

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty;   // Counts empty slots
sem_t full;    // Counts filled slots
pthread_mutex_t mutex;

void* producer(void* arg) {
    int gold_rate = 5000; // Initial gold rate

    for (int i = 0; i < 10; i++) {
        sleep(1); // Simulate time delay
        gold_rate += (rand() % 200) - 100; // Random change in gold rate

        sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        buffer[in] = gold_rate;
        printf("🏭 Producer updated gold rate: %d (stored at %d)\n", gold_rate, in);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&full);
    }
    return NULL;
}

void* consumer(void* arg) {
    int rate;

    for (int i = 0; i < 10; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        rate = buffer[out];
        printf("💰 Consumer reads gold rate: %d (from %d)\n", rate, out);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
        sleep(2); // Simulate consumer processing delay
    }
    return NULL;
}

int main() {
    pthread_t prod_thread, cons_thread;

    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    printf("\n✅ Gold rate production and consumption finished.\n");
    return 0;
}
